/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 19:15:22 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("org.jsoup.safety.Whitelist$Protocol");
      boolean boolean0 = whitelist_AttributeKey0.equals("l%w#w%%HF=nWr\"RJfJQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("j Mx,_S1j2(ZiC_8T");
      boolean boolean0 = whitelist_TagName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("7,c2T7H");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote", "blockquote");
      Attribute attribute0 = Attribute.createFromEncoded("blockquote", "org.jsoup.safety.Whitelist$Protocol");
      boolean boolean0 = whitelist1.isSafeAttribute("org.jsoup.safety.Whitelist$Protocol", (Element) null, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote", "blockquote");
      Document document0 = Document.createShell("org.jsoup.safety.Whitelist$Protocol");
      Attribute attribute0 = new Attribute("td", "blockquote");
      boolean boolean0 = whitelist1.isSafeAttribute("org.jsoup.safety.Whitelist$Protocol", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "+JA(!8";
      stringArray0[1] = "+JA(!8";
      stringArray0[2] = "+JA(!8";
      Whitelist whitelist1 = whitelist0.addAttributes("+JA(!8", stringArray0);
      Document document0 = Document.createShell("+JA(!8");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("+JA(!8", "+JA(!8", attributes0);
      whitelist0.addProtocols("+JA(!8", "Y<;>or", stringArray0);
      boolean boolean0 = whitelist1.isSafeAttribute("+JA(!8", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "title";
      stringArray0[1] = "title";
      stringArray0[2] = "title";
      stringArray0[3] = "title";
      stringArray0[4] = "title";
      stringArray0[5] = "title";
      stringArray0[6] = "title";
      whitelist0.addAttributes("title", stringArray0);
      Document document0 = Document.createShell("title");
      Attribute attribute0 = new Attribute("title", "title");
      boolean boolean0 = whitelist0.isSafeAttribute("title", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "title";
      stringArray0[1] = "title";
      stringArray0[2] = "title";
      stringArray0[3] = "title";
      stringArray0[4] = "title";
      stringArray0[5] = "title";
      stringArray0[6] = "title";
      whitelist0.addAttributes("title", stringArray0);
      Document document0 = Document.createShell("title");
      Attribute attribute0 = Attribute.createFromEncoded("dd", "title");
      boolean boolean0 = whitelist0.isSafeAttribute("title", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("'1", "'1", "'1");
      boolean boolean0 = whitelist0.isSafeTag("'1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      boolean boolean0 = whitelist0.isSafeTag("j Mx,_S1j2(ZiC_8T");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'1";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "ftp";
      stringArray1[1] = "ftp";
      whitelist0.addProtocols("'1", "'1", stringArray1);
      whitelist0.addProtocols("'1", "ftp", stringArray0);
      Whitelist whitelist1 = whitelist0.removeProtocols("'1", "ftp", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'1";
      whitelist0.addProtocols("'1", "ftp", stringArray0);
      Whitelist whitelist1 = whitelist0.removeProtocols("'1", "ftp", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("|lHK", "nd]1L&Q", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "title";
      stringArray0[1] = "title";
      stringArray0[2] = "title";
      stringArray0[3] = "title";
      stringArray0[4] = "title";
      stringArray0[5] = "title";
      stringArray0[6] = "title";
      whitelist0.addProtocols("title", "title", stringArray0);
      Whitelist whitelist1 = whitelist0.addProtocols("title", "title", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote", "blockquote");
      Whitelist whitelist2 = whitelist0.removeEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote", "blockquote");
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "l%w#w%%HF=nWr\"RJfJQ");
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("colgroup", "\"4|");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "org.jsoup.safety.Whitelist$Protocol");
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote", "blockquote");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$Protocol", "blockquote", "fSv.u");
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"4|";
      stringArray0[1] = "58j0";
      stringArray0[2] = "MEu|=bM+";
      stringArray0[3] = "4onoU*[s?%(btePTT";
      stringArray0[4] = "AN6,vr";
      stringArray0[5] = "ol";
      stringArray0[6] = "org.jsoup.select.Evaluator$IsOnlyOfType";
      Whitelist whitelist1 = whitelist0.removeAttributes("colgroup", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cJ@7";
      stringArray0[1] = "\"?;U+Od8!1{R<@";
      stringArray0[2] = "cJ@7";
      stringArray0[3] = "cJ@7";
      stringArray0[4] = "cJ@7";
      stringArray0[5] = "cJ@7";
      stringArray0[6] = "cJ@7";
      Whitelist whitelist1 = whitelist0.addAttributes("cJ@7", stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes("cJ@7", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i";
      Whitelist whitelist1 = whitelist0.removeAttributes("i", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "code";
      stringArray0[1] = "code";
      stringArray0[2] = "code";
      whitelist0.addAttributes("code", stringArray0);
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "mFS?d(r%";
      stringArray0[1] = "Y";
      stringArray0[2] = "option";
      stringArray0[3] = "KK0 T";
      stringArray0[4] = "org.jsoup.select.Evaluator$IsFirstOfType";
      stringArray0[5] = "colgroup";
      stringArray0[6] = "%Y**pvLz=b&:)UN(p+";
      stringArray0[7] = "tbody";
      stringArray0[8] = "h4";
      Whitelist whitelist1 = whitelist0.addAttributes("table", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("#data", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "ftp";
      stringArray1[1] = "ftp";
      whitelist0.addProtocols("'1", "'1", stringArray1);
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("'1", "ftp", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "code";
      stringArray0[1] = "code";
      stringArray0[2] = "code";
      Whitelist whitelist1 = whitelist0.addAttributes("code", stringArray0);
      Document document0 = Document.createShell("code");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("code", "code", attributes0);
      whitelist0.addProtocols("code", "code", stringArray0);
      boolean boolean0 = whitelist1.isSafeAttribute("code", document0, attribute0);
      assertFalse(boolean0);
      assertEquals("code", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("us", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
