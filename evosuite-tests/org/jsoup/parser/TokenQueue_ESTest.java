/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 18:48:53 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%'~<m-!wb\"7!m1D]");
      Character character0 = new Character('-');
      tokenQueue0.addFirst(character0);
      assertEquals('-', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"<u=w^CJPSx");
      tokenQueue0.addFirst("Queue did not match expected sequence");
      tokenQueue0.consumeAttributeKey();
      assertEquals(' ', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      tokenQueue0.consume("'");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1AAK-B<_pO /u-%,Y");
      tokenQueue0.consumeTagName();
      assertEquals("<_pO /u-%,Y", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeTagName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("         ");
      tokenQueue0.consumeWhitespace();
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = TokenQueue.unescape("$hCA}ab;dIOa:vX");
      assertEquals("$hCA}ab;dIOa:vX", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = TokenQueue.unescape("ZU\\@sr~");
      assertEquals("ZU@sr~", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("queue did not match expected szb3 d\"q3#axo`tpsx");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('i', ' ');
      assertEquals('d', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("cB'B:\") %y3k0");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('c', ',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'B'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("nZES'");
      Character character0 = new Character('\"');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', '\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'nZES'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("?su(M'Kg5Ca");
      tokenQueue0.addFirst("?su(M'Kg5Ca");
      Character character0 = Character.valueOf('d');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('d', '4');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '?su(M'Kg5Ca?su(M'Kg5Ca'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("n\"ZE''");
      Character character0 = new Character('&');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('&', '&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'n'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("nZES'");
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[687t_pW)[/~6))");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('[', '[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '687t_pW)[/~6))'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$hCA}ab;dIOa:vX");
      tokenQueue0.consumeToIgnoreCase("~rMGhh'");
      tokenQueue0.chompBalanced('0', 'V');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil$1");
      tokenQueue0.consumeWord();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jsoup.helper.StringUtil$1";
      stringArray0[1] = "org";
      stringArray0[2] = "org";
      stringArray0[3] = "org.jsoup.helper.StringUtil$1";
      stringArray0[4] = "org.jsoup.helper.StringUtil$1";
      stringArray0[5] = "org";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|X}");
      Character character0 = new Character('R');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompToIgnoreCase("|X}");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"<u=w^CJPSx");
      tokenQueue0.consumeToIgnoreCase("ZB3 d\"q3#axO`t");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("         ");
      tokenQueue0.chompTo("");
      assertEquals("         ", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0s<'1?vCkqUC");
      tokenQueue0.consume();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("0s<'1?vCkqUC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0s<'1?vCkqUC");
      tokenQueue0.advance();
      assertEquals('s', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$hCA}ab;dIOa:vX");
      tokenQueue0.consumeToIgnoreCase("~rMGhh'");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.consumeElementSelector();
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals(' ', tokenQueue0.peek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0s<'1?vCkqUC");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("equencw<u=w^cj");
      tokenQueue0.consumeWord();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("<u=w^cj", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0s<'1?vCkqUC");
      tokenQueue0.consumeCssIdentifier();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("<'1?vCkqUC", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0s<'1?vCkqUC");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("^-kplo");
      tokenQueue0.chompBalanced('9', '9');
      tokenQueue0.consumeCssIdentifier();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      char[] charArray0 = new char[1];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("?su(M'Kg5Ca");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?su(M'Kg5Ca";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string0);
      assertEquals('?', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%'~<m-!wb\"7!m1D]");
      tokenQueue0.consumeToIgnoreCase("                 ");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1]9^TaAS8qJQz`6");
      char char0 = tokenQueue0.peek();
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      tokenQueue0.consume();
      tokenQueue0.chompToIgnoreCase("                 ");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("w@88.YJREJZ");
      tokenQueue0.toString();
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("2y8fG");
      tokenQueue0.matchesCS("");
      assertEquals('2', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$hCA}ab;dIOa:vX");
      tokenQueue0.chompTo("orgg0r8.bpx1w,qp{tokenqueue");
      assertEquals('\u0000', tokenQueue0.peek());
  }
}
