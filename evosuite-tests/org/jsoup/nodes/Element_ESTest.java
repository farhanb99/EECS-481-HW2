/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 19:07:23 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.val("textarea");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      element1.outerHtml((Appendable) stringBuffer0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("<textarea>textarea</textarea>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">");
      Element element0 = new Element(tag0, ">");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuffer0, (-932), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      MockFileWriter mockFileWriter0 = new MockFileWriter(":yCTI|ns5}t9");
      document1.html((OutputStreamWriter) mockFileWriter0);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("gxSZK?*).|HlJX1");
      Element element0 = document0.val("id");
      assertEquals("gxSZK?*).|HlJX1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">");
      Element element0 = new Element(tag0, ">");
      element0.val();
      assertEquals(">", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">");
      Element element0 = new Element(tag0, ">");
      Element element1 = element0.toggleClass(">");
      element0.toggleClass("");
      boolean boolean0 = element1.hasClass("AKPfMBnTV93~^Bk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("gxSZK?*).|HlJX1");
      Element element0 = document0.toggleClass("Could not parse attribute query '%s': unexpected token at '%s'");
      boolean boolean0 = element0.hasClass("Could not parse attribute query '%s': unexpected token at '%s'");
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("gxSZK?*).|HlJX1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">");
      Element element0 = new Element(tag0, ">");
      Element element1 = element0.toggleClass(">");
      element1.hasClass("AKPfMBnTV93~^Bk");
      assertEquals(">", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.html("u]qz2");
      document0.data();
      assertEquals(1, document0.childNodeSize());
      assertEquals("u]qz2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.data();
      assertEquals("u]qz2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("class");
      Document document1 = document0.normalise();
      document0.text("Rcdata");
      boolean boolean0 = document1.hasText();
      assertEquals(1, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#~");
      boolean boolean0 = Element.preserveWhitespace(cDataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Patter syntax errr:");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("?F!P");
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element element1 = element0.val("textarea");
      String string0 = element1.val();
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("IWa32");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "IWa32", attributes0);
      Element element1 = element0.text("");
      Pattern pattern0 = Pattern.compile("strong", 4835);
      element1.getElementsMatchingOwnText(pattern0);
      assertEquals("IWa32", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.html("u]qz2");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("u]qz2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.html("u]qz2");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      Pattern pattern0 = Pattern.compile("2h+]");
      document1.normalise();
      document1.getElementsMatchingText(pattern0);
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      Element element0 = document0.html("u]qz2");
      element0.appendElement(" > ");
      document0.getElementsMatchingText("u]qz2");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      Element element0 = document0.html("u]qz2");
      element0.prependChild(document0);
      element0.lastElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("$!)SRORzSNyQAdz`");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("$!)SRORzSNyQAdz`", element1.baseUri());
      assertEquals("head", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      Element element0 = document0.html("u]qz2");
      document0.prependChild(document0);
      element0.firstElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.appendChild(document0);
      document0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.prependChild(document0);
      document0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      Element element0 = document0.html("u]qz2");
      element0.prependChild(document0);
      element0.nextElementSibling();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.nextElementSibling();
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.prependChild(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      document0.siblingElements();
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("X");
      document0.normalise();
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">");
      Element element0 = new Element(tag0, ">");
      element0.toggleClass(">");
      element0.cssSelector();
      assertEquals(">", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("cv`trK4");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1620), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("F]Lyg", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hU#869", attributes0);
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        pseudoTextElement0.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("ZL_;hz_uEBqQyo");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1733), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Elements elements0 = document0.getElementsByIndexLessThan(9);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeStarting("e");
      // Undeclared exception!
      try { 
        formElement0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("u0gDE2uhR}R}EI4q");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("u0gDE2uhR}R}EI4q", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell(")0>5R>1%4");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(")0>5R>1%4", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tag tag0 = Tag.valueOf("IWa32");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "IWa32", attributes0);
      element0.text("");
      element0.textNodes();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("F]Lyg", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "F]Lyg", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hU#869", attributes0);
      Element element1 = element0.doClone(pseudoTextElement0);
      element1.append("hU#869");
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("u0gDE2uhR}R}EI4q");
      document0.prependChild(document0);
      document0.parents();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("u0gDE2uhR}R}EI4q");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-84));
      assertEquals("u0gDE2uhR}R}EI4q", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("cl0ass");
      document0.selectFirst("Rcdata");
      assertEquals(1, document0.childNodeSize());
      assertEquals("cl0ass", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Tag tag0 = Tag.valueOf("IWa32");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "IWa32", attributes0);
      element0.getAllElements();
      assertEquals("IWa32", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      Element element0 = document0.removeClass("pJrZX");
      assertEquals(1, element0.childNodeSize());
      assertEquals("u]qz2", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.getElementsByAttribute("s+");
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.toString();
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("pz-G#");
      document0.getElementsByAttributeValueNot("pz-G#", "c");
      assertEquals("pz-G#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Element element0 = document0.shallowClone();
      assertEquals("org.jsoup.nodes.DocumentType", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.doSetBaseUri("u]qz2");
      assertEquals("u]qz2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Element element0 = new Element("TSafoQ$ovXP2-");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("TSafoQ$ovXP2-", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("U sWGdq'=&");
      Elements elements0 = document0.getElementsContainingText("U sWGdq'=&");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("U sWGdq'=&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByClass("K86L4D0o+?5=");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.getElementsByAttributeValueEnding(" > ", "2h+]");
      assertEquals(1, document0.childNodeSize());
      assertEquals("u]qz2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("u0gDE2uhR}R}EI4q");
      document0.is("html");
      assertEquals("u0gDE2uhR}R}EI4q", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueMatching("", "");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.wrap("sup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".juNycIYxr");
      Element element0 = new Element(tag0, ")y#7");
      Elements elements0 = element0.getElementsMatchingOwnText("F'n?E#\"");
      assertTrue(elements0.isEmpty());
      assertEquals(")y#7", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Elements elements0 = document0.getElementsByIndexEquals((-2820));
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("limitedQuirks");
      // Undeclared exception!
      try { 
        document0.after("l&9[vT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Pattern pattern0 = Pattern.compile(" />", 0);
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#~");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("!+/fN'f4fmdY}`", parseSettings0);
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "!+/fN'f4fmdY}`", attributes0);
      element0.prepend("!+/fN'f4fmdY}`");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.getElementsByAttributeValueStarting("u]qz2", "bAOu.M)x{.eG=7");
      assertEquals(1, document0.childNodeSize());
      assertEquals("u]qz2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("u0gDE2uhR}R}EI4q");
      assertFalse(document0.hasParent());
      
      document0.getElementsByAttributeValue("h3", "K\"jX:j6");
      assertEquals(1, document0.childNodeSize());
      assertEquals("u0gDE2uhR}R}EI4q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("u0gDE2uhR}R}EI4q");
      Element element0 = document0.attr("u0gDE2uhR}R}EI4q", false);
      assertEquals("u0gDE2uhR}R}EI4q", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Document", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Document", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.before((Node) pseudoTextElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = Document.createShell("class");
      Element element0 = document0.addClass("");
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("class", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("class");
      Elements elements0 = document0.getElementsContainingOwnText("class");
      assertEquals(0, elements0.size());
      assertEquals("class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("1D-a*Wba)6_{mN");
      document0.dataset();
      assertEquals("1D-a*Wba)6_{mN", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = Document.createShell("u]qz2");
      document0.prependText(".>");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(".", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.child(1553);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1553, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("U sWGdq'=&");
      Element element0 = document0.appendText("U sWGdq'=&");
      Elements elements0 = element0.getElementsContainingText("U sWGdq'=&");
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("cl0ass");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.getElementById("cl0ass");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("cl0ass", document0.baseUri());
  }
}
