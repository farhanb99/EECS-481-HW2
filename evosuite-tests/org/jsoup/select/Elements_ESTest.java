/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 19:20:27 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("<+o'=", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "\n", attributes0);
      elementArray0[0] = (Element) formElement0;
      Elements elements0 = new Elements(elementArray0);
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.contains(formElement0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("NPda/b>ESEX,s$o[", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.elements();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.last();
      assertEquals("]g", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByIndexLessThan((-5830));
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      document0.prependChild(document0);
      // Undeclared exception!
      elements0.prev("summary");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("org.jsoup.select.Elements");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByIndexLessThan((-5830));
      // Undeclared exception!
      try { 
        elements0.eq((-5830));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Elements");
      Elements elements0 = element0.getElementsByAttributeValueMatching("br", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Elements elements1 = elements0.eq(0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("\"6y}3,PH");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      elements0.remove();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("5p/9?/$L.W3qwS'", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      Elements elements1 = elements0.empty();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      elements0.unwrap();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      Element element0 = new Element(tag0, " > ", (Attributes) null);
      Elements elements0 = element0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.wrap(" > ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.wrap("'tRoY");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      elements0.after("9z#B<o~QiN]0P_,T");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("-8UyWlN/4HmsQn");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("#N$(cj.I\"L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValueContaining("\n", "R");
      Elements elements1 = elements0.before("\n");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      elements0.prepend("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>");
      assertEquals(10, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingText("");
      elements0.tagName("R4k]iOt9S`V\"37s");
      assertEquals("R4k]iOt9S`V\"37s", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Element element0 = new Element("M#.0|G%\"M&VTs>oeGQ");
      Elements elements0 = element0.getElementsMatchingOwnText("");
      elements0.html(":SbSI.|ueN8");
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains(":SbSI.|ueN8"));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("M#.0|G%\"M&VTs>oeGQ");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      List<String> list0 = elements0.eachText();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      elements0.append("9z#B<o~QiN]0P_,T");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("option[selected]");
      document0.text("option[selected]");
      Elements elements0 = document0.getElementsByIndexLessThan(36);
      String string0 = elements0.text();
      assertEquals("option[selected]  option[selected]", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.val("9z#B<o~QiN]0P_,T");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("colgroup");
      Elements elements0 = document0.children();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("M%A{o'R#1%ZJ", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "M%A{o'R#1%ZJ", attributes0);
      Elements elements0 = formElement0.getElementsMatchingText("M8+/wDO#A&HUtaD");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("a9g");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("a9g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~C");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "tMlu>9{u>UCef&", attributes0);
      Elements elements0 = element0.getElementsContainingText("");
      elements0.toggleClass("=YR%xUW^FtsJB=+jhH&");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("a9g");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeClass("a9g");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("Odu9m\";)!'=(YJ#");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1));
      Elements elements1 = elements0.addClass("Odu9m\";)!'=(YJ#");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("a9g");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeAttr("a9g");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("M#.0|G%\"M&VTs>oeGQ");
      document0.attr("M#.0|G%\"M&VTs>oeGQ", "");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      List<String> list0 = elements0.eachAttr("M#.0|G%\"M&VTs>oeGQ");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("\"6y}3,PH");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      List<String> list0 = elements0.eachAttr("\"6y}3,PH");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~C");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("tMlu>9{u>UCef&", "tMlu>9{u>UCef&");
      Element element0 = new Element(tag0, "tMlu>9{u>UCef&", attributes1);
      Elements elements0 = element0.getElementsContainingText("");
      boolean boolean0 = elements0.hasAttr("tMlu>9{u>UCef&");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.children();
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      elements0.attr("9z#B<o~QiN]0P_,T", "9z#B<o~QiN]0P_,T");
      String string0 = elements0.attr("9z#B<o~QiN]0P_,T");
      assertEquals("9z#B<o~QiN]0P_,T", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("a9g");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.attr("zYnc^6nlg$N*Nd1C%");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("a9g");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByIndexLessThan((-5830));
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Elements");
      Elements elements0 = element0.getElementsByAttributeValueMatching("br", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      Elements elements1 = elements0.not("br");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("9z#B<o~QiN]0P_,T");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.parents();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Elements elements0 = new Elements(2267);
      Elements elements1 = elements0.select("LG");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByIndexLessThan((-5830));
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("aA''F[)E_~ K=1", "J#YWRGB9l");
      Elements elements1 = elements0.prevAll("J#YWRGB9l");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("]g");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Tag tag0 = Tag.valueOf("%iV`;ogqZW83PF+");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "%iV`;ogqZW83PF+", attributes0);
      Elements elements0 = element0.getElementsByTag("%iV`;ogqZW83PF+");
      // Undeclared exception!
      try { 
        elements0.next("mOKW0&C*^1F~W.:");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'mOKW0&C*^1F~W.:': unexpected token at '&C*^1F~W.:'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "");
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell(":wL^<!WqzCX=)m[");
      Elements elements0 = document0.getElementsByAttributeValue(":wL^<!WqzCX=)m[", ":wL^<!WqzCX=)m[");
      // Undeclared exception!
      try { 
        elements0.nextAll(":wL^<!WqzCX=)m[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':wL^<!WqzCX=)m[': unexpected token at ':wL^<!WqzCX=)m['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
